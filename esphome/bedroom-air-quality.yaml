esphome:
  name: bedroom-air-quality
  friendly_name: Bedroom Air Quality
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - aqi.h
    - humidity_correction.h
    - color_utils.h


esp32:
  board: adafruit_feather_esp32s3
  variant: esp32s3
  framework:
    type: arduino

# Enable logging
logger:
  #level: DEBUG
   level: INFO
  # logs:
  #   pmsa003i: ERROR
  #   scd4x: ERROR
  #   sensor: DEBUG


bluetooth_proxy:
  active: true

# Enable Home Assistant API
api:
  encryption:
    key: "ynGfaEiLcGoIbLZYZC8RPAUQ5Zykfw7KaAEbceT8JVo="

ota:
  password: "f1032615bf34151cfdabacad206096c9"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 10.3.1.36
    gateway: 10.3.1.2
    subnet: 255.255.0.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bedroom-Air-Quality"
    password: "3YNltoMmXWXn"

#captive_portal:

button:
  - platform: restart
    name: "Restart"
    entity_category: "CONFIG"   

i2c:
  - id: bus_a
    sda: GPIO41
    scl: GPIO40
#    frequency: 100000Hz
#    frequency: 800kHz
    frequency: 50kHz
    scan: true
    setup_priority: 700

switch:
  - platform: gpio
    id: neopix_power
    restore_mode: ALWAYS_ON
    pin: GPIO38

sensor:
  - platform: scd4x
    i2c_id: bus_a
    address: 0x62
    update_interval: 5s
    co2:
      name: "CO2"
      id: co2
      on_value:
        - then:
            - lambda: |-
                auto call = id(neopixel_led).turn_on();
                Color co2RGB = aqiColor(round(x));
                call.set_rgb((float)co2RGB.r/255.0, (float)co2RGB.g/255.0, (float)co2RGB.b/255.0);
        - then: 
            - light.turn_on:
                id: neopixel_led
                transition_length: 0.5s
                brightness: 15%
                red: !lambda |- 
                  Color co2RGB = co2Color(round(x));
                  return (float)co2RGB.r / 255.0;
                green: !lambda |- 
                  Color co2RGB = co2Color(round(x));
                  return (float)co2RGB.g / 255.0;
                blue: !lambda |- 
                  Color co2RGB = co2Color(round(x));
                  return (float)co2RGB.b / 255.0;
    temperature:
      name: "Temperature"
      id: temperature
      accuracy_decimals: 1
    humidity:
      name: "Humidity"
      id: humidity
      accuracy_decimals: 1
  
  - platform: template
    name: Dew Point
    id: dew_point
    unit_of_measurement: "°F"
    icon: mdi:thermometer-water
    update_interval: 5s
    device_class: temperature
    accuracy_decimals: 1
    lambda: |-
      float temp = id(temperature).state;
      float hum = id(humidity).state;
      float dew = compute_dew_point(temp, hum);
      // ESP_LOGI("dew", "temperature: %.1f humidity: %.1f, dewpoint: %.1f", temp, hum, dew);
      return c_to_f(dew);

  # Raw sensor values updated at 1s, but kept internal to be used for
  # template sensor values exposed to HA
  - platform: pmsa003i
    i2c_id: bus_a
    address: 0x12
    pm_1_0:
      id: pm_1_0_raw
    pm_2_5:
      id: pm_2_5_raw
    pm_10_0:
      id: pm_10_raw
#     pmc_0_3:
#       id: pmc_0_3_raw
# #      name: "PMC <0.3µm"
#     pmc_0_5:
#       id: pcm_0_5_raw
# #      name: "PMC <0.5µm"
#     pmc_1_0:
#       id: pmc_1_0_raw
# #      name: "PMC <1µm"
#     pmc_2_5:
#       id: pmc_2_5_raw
# #      name: "PMC <2.5µm"
#     pmc_5_0:
#       id: pmc_5_0_raw
# #      name: "PMC <5µm"
#     pmc_10_0:
#       id: pmc_10_0_raw
# #      name: "PMC <10µm"
    update_interval: 1s


  - platform: template
    name: "PM1.0"
    id: pm_1_0
    device_class: PM1
    unit_of_measurement: µg/m³
    state_class: measurement
    icon: mdi:grain

    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pm_1_0_raw).state);"
  - platform: template
    name: "PM2.5"
    id: pm_2_5
    device_class: PM25
    icon: mdi:smoke
    unit_of_measurement: µg/m³
    state_class: measurement
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pm_2_5_raw).state);"
  - platform: template
    name: "PM10.0"
    id: pm_10
    device_class: PM10
    icon: mdi:flower-pollen
    unit_of_measurement: µg/m³
    state_class: measurement
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pm_10_raw).state);"
  - platform: template
    name: "AQI"
    id: aqi
    device_class: AQI
    state_class: measurement
    icon: mdi:weather-hazy
    accuracy_decimals: 0
    filters:
      - clamp:
          min_value: 0.0
          max_value: 500
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: |-
      float pm2_5 = id(pm_2_5_raw).state;
      float pm10 = id(pm_10_raw).state;
      float aqi2_5 = get_pm2_5_aqi(pm2_5);
      float aqi10 = get_pm10_aqi(pm10);
      float aqi = aqi2_5 > aqi10 ? aqi2_5 : aqi10;
      //ESP_LOGI("AQI", "Computed AQI: %.0f from %.2f PM2.5 and %.2f PM10", aqi, pm2_5, pm10);
      return(aqi);
    update_interval: 1s



light:
  - platform: neopixelbus
    id: neopixel_led
    type: GRB
    variant: WS2812
    pin: GPIO39
    num_leds: 1
    name: "NeoPixel"
