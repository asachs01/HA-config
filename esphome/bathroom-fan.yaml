substitutions:
  device_name: bathroom_fan
  friendly_name: Bathroom Fan
  board_type: adafruit_feather_esp32s2_tft
  fqdn: fan-bathroom.sf.aberrant.org

packages:
  device_base: !include common/feather_esp32s2.yaml
  fonts: !include common/fonts.yaml
  temperature: !include common/sht3xd.yaml


logger:
  logs:
    graph: ERROR


esphome:
  on_boot:
    priority: 900
    then:
      - lambda: "pinMode(7, OUTPUT); digitalWrite(7, HIGH);"


binary_sensor:
  - platform: gpio
    name: "Controller Power Button"
    id: a_button
    pin: 
      number: GPIO0
      mode: INPUT_PULLUP
    filters:
      - invert:
    on_press: 
      - lambda: |-
          auto controller1_call = id(humidity_controller_stage1).make_call();
          auto controller2_call = id(humidity_controller_stage2).make_call();
          auto fan_call = id(bathroom_fan).make_call();    
          if(id(humidity_controller_stage1).mode == CLIMATE_MODE_OFF) {
            controller1_call.set_mode(CLIMATE_MODE_COOL);
            fan_call.set_speed(id(fan_idle_speed).state * 10.24);
          }
          else {
            controller1_call.set_mode(CLIMATE_MODE_OFF);
          }
          if(id(humidity_controller_stage2).mode == CLIMATE_MODE_OFF) {
            controller2_call.set_mode(CLIMATE_MODE_COOL);
          }
          else {
            controller2_call.set_mode(CLIMATE_MODE_OFF);
          }
          controller1_call.perform();
          controller2_call.perform();
          fan_call.perform();
    on_double_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - lambda: |-
            auto controller1_call = id(humidity_controller_stage1).make_call();
            auto controller2_call = id(humidity_controller_stage2).make_call();
            auto fan_call = id(bathroom_fan).make_call();
            if(id(humidity_controller_stage1).mode == CLIMATE_MODE_OFF) {
              controller1_call.set_mode(CLIMATE_MODE_COOL);
              fan_call.set_state(true);
              fan_call.set_speed(id(fan_idle_speed).state * 10.24);
            }
            else {
              controller1_call.set_mode(CLIMATE_MODE_OFF);
              fan_call.set_state(false);
            }
            if(id(humidity_controller_stage2).mode == CLIMATE_MODE_OFF) {
              controller2_call.set_mode(CLIMATE_MODE_COOL);
            }
            else {
              controller2_call.set_mode(CLIMATE_MODE_OFF);
            }
            controller1_call.perform();
            controller2_call.perform();
            fan_call.perform();
  - platform: gpio
    name: "Speed Up"
    id: b_button
    pin: 
      number: GPIO1
      mode: INPUT_PULLUP
    filters:
      - invert:
  - platform: gpio
    name: "Speed Down"
    id: c_button
    pin: 
      number: GPIO2
      mode: INPUT_PULLUP
    filters:
      - invert:



#
# Controller
#

climate:
  - platform: bang_bang
    name: "Humidity Controller Stage 1"
    id: humidity_controller_stage1
    icon: mdi:cloud-perecent
    sensor: dew_point
    visual:
      min_temperature: 20 °F
      max_temperature: 100 °F
      temperature_step: 1
    default_target_temperature_low: 60 °F
    default_target_temperature_high: 80 °F
    idle_action:
      lambda: |-
        auto fan_call = id(bathroom_fan).make_call();
        fan_call.set_speed(id(fan_idle_speed).state * 10.24);
        fan_call.perform();
    cool_action:
      lambda: |-
        auto fan_call = id(bathroom_fan).make_call();
        fan_call.set_speed(id(fan_low_speed).state * 10.24);
        fan_call.perform();
    
  - platform: bang_bang
    name: "Humidity Controller Stage 2"
    id: humidity_controller_stage2
    icon: mdi:cloud-perecent
    sensor: dew_point
    visual:
      min_temperature: 20 °F
      max_temperature: 100 °F
      temperature_step: 1
    default_target_temperature_low: 80 °F
    default_target_temperature_high: 90 °F
    idle_action:
      lambda: |-
        auto fan_call = id(bathroom_fan).make_call();
        fan_call.set_speed(id(fan_low_speed).state * 10.24);
        fan_call.perform();
    cool_action:
      lambda: |-
        auto fan_call = id(bathroom_fan).make_call();
        fan_call.set_speed(id(fan_high_speed).state * 10.24);
        fan_call.perform();


#
# Input Values
#

number: 
  - platform: template
    name: Humidity Stage 1 Trip
    id: humidity_stage1_threshold
    icon: mdi:cloud-percent
    optimistic: True
    restore_value: True
    initial_value: 80
    min_value: 30
    max_value: 100
    step: 1
    mode: box
    set_action:
      lambda: |-
        auto controller1_call = id(humidity_controller_stage1).make_call();
        auto controller2_call = id(humidity_controller_stage2).make_call();
        float dp = compute_dew_point(id(temperature).state, x);
        ESP_LOGI("number", "stage2 threshold set from %.1f°F to %.1f°F (%.0f%%)", id(humidity_stage1_threshold).state, dp, x);
        controller1_call.set_target_temperature_high(dp);
        controller2_call.set_target_temperature_low(dp-2);
        controller1_call.perform();
        controller2_call.perform();

  - platform: template
    name: Humidity Stage 2 Trip
    id: humidity_stage2_threshold
    icon: mdi:cloud-percent
    optimistic: True
    restore_value: True
    initial_value: 90
    min_value: 30
    max_value: 100
    step: 1
    mode: box
    set_action:
      lambda: |-
        auto controller_call = id(humidity_controller_stage2).make_call();
        float dp = compute_dew_point(id(temperature).state, x);
        ESP_LOGI("number", "stage2 threshold set from %.1f°F to %.1f°F (%.0f%%)", id(humidity_stage2_threshold).state, dp, x);
        float rh = dew_point_to_RH(id(temperature).state, dp);
        ESP_LOGI("debug", "%.1f pct to %.1f DP to %.1f pct", x, dp, rh);
        controller_call.set_target_temperature_high(dp);
        controller_call.perform();

  - platform: template
    name: Clear Baseline Offset
    id: baseline_offset
    optimistic: True
    restore_value: True
    initial_value: 5
    min_value: -20
    max_value: 20
    step: 1
    mode: box
    set_action:
      lambda: |-
        float new_val = id(baseline_dew_point).state + x;
        ESP_LOGI("number", "clear threshold set to %.1f°F", new_val);
        auto controller_call = id(humidity_controller_stage1).make_call();
        controller_call.set_target_temperature_low(f_to_c(new_val));
        controller_call.perform();

  - platform: template
    name: Idle Speed
    id: fan_idle_speed
    icon: mdi:fan-speed-1
    optimistic: True
    restore_value: True
    initial_value: 35
    min_value: 15
    max_value: 50
    step: 1
    mode: box
    set_action:
      lambda: |-
        auto call = id(bathroom_fan).make_call();
        if(id(humidity_controller_stage1).action == CLIMATE_ACTION_IDLE)
          call.set_speed( x * 10.24 );
        call.perform();

  - platform: template
    name: Low Speed
    id: fan_low_speed
    icon: mdi:fan-speed-2
    optimistic: True
    restore_value: True
    initial_value: 50
    min_value: 40
    max_value: 70
    step: 1
    mode: box
    set_action:
      lambda: |-
        auto call = id(bathroom_fan).make_call();
        if((id(humidity_controller_stage1).action == CLIMATE_ACTION_COOLING) &&
           (id(humidity_controller_stage2).action == CLIMATE_ACTION_IDLE)) {
          call.set_speed( x * 10.24 );
        }
        call.perform();


  - platform: template
    name: High Speed
    id: fan_high_speed
    icon: mdi:fan-speed-3
    optimistic: True
    restore_value: True
    initial_value: 80
    min_value: 50
    max_value: 100
    step: 1
    mode: box
    set_action:
      lambda: |-
        auto call = id(bathroom_fan).make_call();
        if(id(humidity_controller_stage2).action == CLIMATE_ACTION_COOLING)
          call.set_speed( x * 10.24 );
        call.perform();


sensor:
  - platform: homeassistant
    name: Baseline Humidity
    id: baseline_humidity
    entity_id: sensor.living_room_humidity
    unit_of_measurement: "%"
    internal: false
    filters:
      - filter_out: NaN

  - platform: homeassistant
    name: Baseline Temperature
    id: baseline_temperature
    entity_id: sensor.living_room_temperature
    unit_of_measurement: "°F"
    internal: false
    filters:
      - filter_out: NaN

  - platform: template
    name: Baseline Dew Point
    id: baseline_dew_point
    unit_of_measurement: "°F"     
    icon: mdi:thermometer-water
    update_interval: 4s
    device_class: temperature
    accuracy_decimals: 1
    lambda: |-
      float temp = id(baseline_temperature).state;
      float hum = id(baseline_humidity).state;
      float dew = compute_dew_point(f_to_c(temp), hum);
      float dp = c_to_f(dew);
      ESP_LOGI("dew", "baseline: temperature: %.1f humidity: %.1f, dewpoint: %.1f", temp, hum, dp);
      return dp;

  - platform: template
    name: Corrected Baseline Humidity
    id: baseline_humidity_corrected
    unit_of_measurement: "%"
    internal: false
    update_interval: 4s
    filters:
      - clamp:
          min_value: 60
          max_value: 100
    lambda: |-
      float temp1 = f_to_c(id(baseline_temperature).state);
      float hum = id(baseline_humidity).state;
      float temp2 = id(temperature).state;
      float corrected = correct_humidity(temp1, hum, temp2); 
      ESP_LOGI("baseline", "humidity corrected to %.1f%%", corrected);
      return corrected;

  - platform: template
    name: Clear Threshold Pct
    id: clear_threshold_pct
    unit_of_measurement: "%"
    internal: false
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      float clear_threshold = id(baseline_humidity_corrected).state + id(baseline_offset).state;
      if (clear_threshold < 60) clear_threshold = 60;
      return clear_threshold;

  - platform: template
    name: Stage 1 Threshold Pct
    id: stage1_threshold_pct
    unit_of_measurement: "%"
    internal: false
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      return id(humidity_stage1_threshold).state;

  - platform: template
    name: Stage 2 Threshold Pct
    id: stage2_threshold_pct
    unit_of_measurement: "%"
    internal: false
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      return id(humidity_stage2_threshold).state;
    


  - platform: template
    name: Clear Threshold
    id: clear_threshold
    unit_of_measurement: "°C"
    device_class: temperature
    internal: false
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      float temp = id(temperature).state;
      float hum = id(clear_threshold_pct).state;
      float dew = compute_dew_point(temp, hum);
      float dp = c_to_f(dew);
      ESP_LOGI("baseline", "clear threshold set to %.1f", dp);
      auto controller_call = id(humidity_controller_stage1).make_call();
      controller_call.set_target_temperature_low(dew);
      controller_call.perform();
      return dew;

  - platform: template
    name: Dew Point
    id: dew_point
    unit_of_measurement: "°C"
    device_class: temperature
    icon: mdi:thermometer-water
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      float temp = id(temperature).state;
      float hum = id(humidity).state;
      float dew = compute_dew_point(temp, hum);
      float dp = c_to_f(dew);
      ESP_LOGI("dew", "actual: temperature: %.1f humidity: %.1f, dewpoint: %.1f", c_to_f(temp), hum, dp);
      return dew;

  - platform: template
    name: Trip Threshold
    id: trip_threshold
    unit_of_measurement: "°C"
    device_class: temperature
    internal: false
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      float temp = id(temperature).state;
      float hum = id(humidity_stage1_threshold).state;
      float dew = compute_dew_point(temp, hum);
      float dp = c_to_f(dew);
      ESP_LOGI("dew", "trip point: temperature: %.1f humidity: %.1f, dewpoint: %.1f", c_to_f(temp), hum, dp);
      auto controller1_call = id(humidity_controller_stage1).make_call();
      auto controller2_call = id(humidity_controller_stage2).make_call();
      controller1_call.set_target_temperature_high(dew);
      controller2_call.set_target_temperature_low(dew-2);
      controller1_call.perform();
      controller2_call.perform();
      return dew;
 

output:
  - platform: ledc
    pin: GPIO17
    id: fan_pwm_high
    frequency: 25000Hz
  - platform: ledc
    pin: GPIO18
    id: fan_pwm_low
    frequency: 25000Hz
  - platform: ledc
    pin: GPIO16
    id: fan_enable
    frequency: 25000Hz

fan:
  - platform: hbridge
    id: bathroom_fan
    name: "Bathroom Fan"
    pin_a: fan_pwm_low
    pin_b: fan_pwm_high
    enable_pin: fan_enable
    decay_mode: slow
    restore_mode: RESTORE_DEFAULT_ON
    speed_count: 1024
    on_turn_on:
      lambda: |-
        auto controller1_call = id(humidity_controller_stage1).make_call();
        auto controller2_call = id(humidity_controller_stage2).make_call();
        controller1_call.set_mode(CLIMATE_MODE_COOL);
        controller2_call.set_mode(CLIMATE_MODE_COOL);
        controller1_call.perform();
        controller2_call.perform();
    on_turn_off:
      lambda: |-
        auto controller1_call = id(humidity_controller_stage1).make_call();
        auto controller2_call = id(humidity_controller_stage2).make_call();
        controller1_call.set_mode(CLIMATE_MODE_OFF);
        controller2_call.set_mode(CLIMATE_MODE_OFF);
        controller1_call.perform();
        controller2_call.perform();




external_components:
  - source: my_components
    components:
      - ssd1306_base
      - ssd1306_i2c
      - ssd1306_spi
      - sht3xd


color:
  - id: color_red
    hex: 'e82e18'
  - id: color_blue
    hex: '0080ff'
  - id: color_green
    hex: '5dd939'
  - id: color_yellow
    hex: 'fffb46'
  - id: color_orange
    hex: 'ee7826'

graph:
  - id: humidity_graph
    duration: 40min
    width: 190
    height: 60
    border: false
    traces:
      - sensor: humidity
        color: color_yellow
        continuous: true
      - sensor: clear_threshold_pct
        line_type: DASHED
        color: color_blue
        continuous: true
      - sensor: stage1_threshold_pct
        line_type: DASHED
        color: color_orange
        continuous: true
      - sensor: stage2_threshold_pct
        line_type: DASHED
        color: color_red
        continuous: true

display:
  - platform: st7789v
    id: bathroom_fan_display
    model: TTGO TDisplay 135x240
    backlight_pin: GPIO45
    cs_pin: GPIO42
    dc_pin: GPIO40
    reset_pin: GPIO41
    rotation: 90
    update_interval: 0.5s
    lambda: |-
      auto fan_speed = id(bathroom_fan).state ? float(id(bathroom_fan).speed) / 1024.0 * 100 : 0;

      it.printf(4, 3, id(futura50), "%.0f%%", fan_speed);
      it.printf(178, 0, id(futura32), "%.0f", c_to_f(float(id(temperature).state)));
      it.circle(219, 12, 4);
      it.circle(219, 12, 3);
      it.printf(224, 0, id(futura32), "F");
      it.printf(178, 36, id(futura32), Color(yellow), "%.0f%%", id(humidity).state);
      if (id(humidity_controller_stage1).mode == CLIMATE_MODE_OFF) {
        it.printf(0, 110, id(futura24), "Controller Off");
      }
      else {
        it.graph(50, 75, id(humidity_graph));
        it.printf(0, 60, id(futura24), Color(orange), "%.0f", id(humidity_stage1_threshold).state);
        it.printf(0, 110, id(futura24), Color(blue), "%.0f", id(clear_threshold_pct).state);
      }
