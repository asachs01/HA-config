esphome:
  name: power-meter
  friendly_name: Power Meter


esp32:
  board: adafruit_qtpy_esp32
#  variant: esp32s3
  framework:
    type: arduino
    # type: esp-idf
    # version: recommended
    # sdkconfig_options:
    #   COMPILER_OPTIMIZATION_SIZE: y


# Enable logging
logger:
  level: INFO
  hardware_uart: UART0


# Enable Home Assistant API
api:
  encryption:
    key: "1R9vlbGtfXv91/MUPsFVdcu+YlSknU08q83PQnCGFoA="

ota:

bluetooth_proxy:
  active: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

#  manual_ip:
#    static_ip: 10.3.1.46
#    gateway: 10.3.1.2
#    subnet: 255.255.0.0

# captive_portal:
    
button:
  - platform: restart
    name: "Restart"
    entity_category: "CONFIG"


sensor:
  - platform: homeassistant
    name: Power
    id: power
    entity_id: sensor.mains_power_total
#    entity_id: sensor.meter_test_sensor
    unit_of_measurement: 'W'
    internal: true
    filters:
      - calibrate_polynomial:
          degree: 5
          datapoints:
            - 0.0 -> 0
            - 200 -> 400
            - 500 -> 990
            - 1300 -> 1980
            - 1500 -> 2205
            - 2000 -> 2715
            - 3000 -> 3600
            - 3500 -> 3975
            - 4000 -> 4310
            - 4500 -> 4630
            - 5000 -> 4925            
    on_value:
      then:
        - lambda: |-
            float pct = x / 5000;
            id(meter_output).set_level(pct);



light:
  - platform: neopixelbus
    id: neopixel_led
    type: GRB
    variant: WS2812
    pin: GPIO5
    num_leds: 1
    name: "NeoPixel"

output:
  - platform: ledc
    pin: GPIO14
    id: meter_output
    frequency: 25000Hz


switch:
  - platform: gpio
    id: neopixel_power
    restore_mode: ALWAYS_ON
    pin: GPIO8

  - platform: gpio
    id: meter_ground
    restore_mode: ALWAYS_OFF
    pin: GPIO33